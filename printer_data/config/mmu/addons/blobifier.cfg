# Include servo hardware definition separately to allow for automatic upgrade
[include blobifier_hw.cfg]

##########################################################################################

# Sample config to be used in conjunction with Blobifier Purge Tray, Bucket & Nozzle 
# Scrubber mod. Created by Dendrowen (dendrowen on Discord). The Macro is based on a 
# version, and Nozzle Scrubber is made by Hernsl (hernsl#8860 on Discord). The device is 
# designed around a Voron V2.4 300mm, but should work for 250mm and 350mm too. This 
# version only supports the assembly on the rear-left of the bed. If you decide to change 
# that, please consider contributing to the project by creating a pull request with the 
# needed changes.

# IMPORTANT: The rear-left part of your bed becomes unusable by this mod because the 
#            toolhead needs to lower down to 0. Be sure not to use the left-rear 130x35mm.

# The goals of this combination of devices is to dispose of purged filament during a 
# multicolored print without the need of a purge block and without the flurries of
# filament poops consuming your entire 3D printer room. The Blobifier achieves that by
# purging onto a retractable tray which causes the filament to turn into a tiny blob 
# rather then a large spiral. This keeps the waste relativly small. The bucket should be
# able to account for up to 200 filament swaps (for the 300mm V2).

# The Blobifier uses some room at the back-left side of your printer, depending on your
# printer limits and positions. (usually max_pos.y - toolhead_y and brush_start + 
# brush_width + toolhead_x). If you do place objects within this region, Blobifier will
# skip purging automatically. It does this by extending the EXCLUDE_OBJECT_* macro's, so
# make sure you have exclude objects enabled in your slicer.

# If your using Blobifier in conjunction with the filament cutter on the stealthburner
# toolhead, you can place the pin at max_pos.y - 7 (e.g., max pos y is 307, place it at
# 300). The pin will then poke through the cavity in your toolhead. (Be careful with 
# manually moving the toolhead. I have broken many filament cutter pins)

# It is advised to use the start_gcode from Happy Hare. Then you will be able to fully 
# and efficiently use this mod. Check the Happy Hare document at gcode_preprocessing.md 
# in the Happy Hare github for more details.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the 
# emergency stop.

##########################################################################################

##########################################################################################
# Main macro. Usually you should only need to call this one or place it in the Happy Hare
# _MMU_POST_LOAD macro using the variable_user_post_load_extension:
#
# variable_user_post_load_extension : `BLOBIFIER`
#
# Notes on parameters:
# PURGE_LENGTH=[float] (optional) The length to purge. If ommited (default) it will check
#                      the purge_volumes matrix or variable_purge_length. This can be used
#                      to override and for testing.
#
[gcode_macro BLOBIFIER]
# These parameters define your filament purging.
# Note that the control of retraction is set in 'mmu_macro_vars.cfg' which can be increased
# if you experience excessive oozing.
variable_purge_spd: 400                 # Speed, in mm/min, of the purge.
variable_purge_temp_min: 200            # Minimum nozzle purge temperature.
variable_toolhead_x: 70                 # From the nozzle to the left of your toolhead
variable_toolhead_y: 50                 # From the nozzle to the front of your toolhead

# This macro will prevent a gcode movement downward while 'blobbing' if there might be a
# print in the way (e.g. You print something large and need the area where Blobifier does
# its... 'business'). However, at low heights (or at print start) this might not be
# desireable. You can force a 'safe descend' with this variable. Keep in mind that the 
# height of the print is an estimation based on previous heights and certain assumptions
# so it might be wise to include a safety margin of 0.2mm
variable_force_safe_descend_height_until: 1.0

# Adjust this so that your nozzle scrubs within the brush. Be careful not to go too low!
# Start out with a high value (like, 6) and go
# down from there.
variable_brush_top: 6

# These parameters define your scrubbing, travel speeds, safe z clearance and how many
# times you want to wipe. Update as necessary.
variable_clearance_z: 2          # When traveling, but not cleaning, the
                                           #   clearance along the z-axis between nozzle
                                           #   and brush.
variable_wipe_qty: 2          # Number of complete (A complete wipe: left,
                                           #   right, left OR right, left, right) wipes.
variable_travel_spd_xy: 10000          # Travel (not cleaning) speed along x and
                                           #   y-axis in mm/min.
variable_travel_spd_z: 1000          # Travel (not cleaning) speed along z axis
                                           #   in mm/min.
variable_wipe_spd_xy: 10000          # Nozzle wipe speed in mm/min.

# Blobifier sends the toolhead to the maximum y position during purge oeprations and
# minimum x position during shake operations. This can cause issues when skew correction 
# is set up. If you have skew correction enabled and get 'move out of range' errors 
# regarding blobifier while skew is enabled, try increasing this value. Keep the 
# adjustments small though! (0.1mm - 0.5mm) and increase it until it works.
variable_skew_correction: 0

# These parameters define the size of the brush. Update as necessary. A visual reference
# is provided below.
#
#                  ←   brush_width   →
#                   _________________
#                  |                 |  ↑                Y position is acquired from your
#  brush_start (x) |                 | brush_depth       stepper_y position_max. Adjust
#                  |_________________|  ↓                your brush physically in Y so
#                          (y)                           that the nozzle scrubs within the
#                      brush_front                       brush.
# __________________________________________________________
#                     PRINTER FRONT
#
#
# Start location of the brush. Defaults for 250, 300 and 350mm are provided below.
# Uncomment as necessary
#variable_brush_start:          34  # For 250mm build
variable_brush_start: 67  # For 300mm build
#variable_brush_start:          84  # for 350mm build

# width of the brush
variable_brush_width: 35

# Location of where to purge. The tray is 15mm in length, so if you assemble it against 
# the side of the bed (default), 10mm is a good location
variable_purge_x: 10

# Height of the tray. If it's below your bed, give this a negative number equal to the 
# difference. If it's above your bed, give it a positive number. You can find this number 
# by homing, optional QGL or equivalent, and moving you toolhead above the tray, and 
# lowering it with the paper method. 
variable_tray_top: 0.7

# Servo angles for tray positions
variable_tray_angle_out: 0
variable_tray_angle_in: 180

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. iteration_z_raise    |
# |                                     | Incr. max_iteration_length |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Incr. iteration_z_change   |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Decr. iteration_z_change   |
# |         later iterations            |                            |
# +-------------------------------------+----------------------------+
# |        I think my blobs can         | Balsy... Increase          |
# |          be much bigger!            | max_iterations_per_blob    |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start: 0.2

# The maximum mm of filament (length) to extrude one iteration. A blob contains multiple 
# iterations
variable_max_iteration_length: 50

# The amount to raise Z for each iteration
variable_iteration_z_raise: 5

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced.
variable_iteration_z_change: 0.8

# Maximum iterations per blob. 3 Should be sufficient for most flushes. If not, Blobifier 
# will create multiple blobs for a single purge.
variable_max_iterations_per_blob: 3

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop: 1.0

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 1000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1              # Leave it unchanged
#variable_part_cooling_fan:  0              # Disable the fan
variable_part_cooling_fan: 1               # Run it at full speed


# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 150

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 30

# The slicer values often are a bit too wastefull. Tune it here to get optimal values. 0.6
# is a good starting point.
variable_purge_length_modifier: 0.5

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 30

# ========================================================================================
# ==================== BUCKET ============================================================
# ========================================================================================

# Maximum number of blobs that fit in the bucket. Pauses the print if it exceeds this 
# number.
variable_max_blobs: 400
# Enable the bucket shaker. You need to have the shaker.stl installed
variable_enable_shaker: 1
# The number of back-and-forth motions of one shake
variable_bucket_shakes: 10
# During shaking acceleration can often be higher because you don't neeed to keep print 
# quality in mind. Higher acceleration helps better with dispersing the blobs.
variable_shake_accel: 10000

# The frequency at which to shake the bucket. A decimal value ranging from 0 to 1, where 0 
# is never, and 1 is every time. This way the shaking occurs more often as the bucket 
# fills up. Sensible values range from 0.75 to 0.95
variable_bucket_shake_frequency: 0.95

gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_state

  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="BLOBIFIER: Not homed! Home xyz before blobbing"
  {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}
    RESPOND MSG="BLOBIFIER: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}
    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = printer.fan.speed %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set safe = printer['gcode_macro _BLOBIFIER_SAFE_DESCEND'] %}
    {% set ignore_safe = safe.print_height < force_safe_descend_height_until %}
    {% set restore_z = [printer['gcode_macro BLOBIFIER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y - skew_correction %}

    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}

    {% elif pv %} # ============== FETCH FROM HAPPY HARE (LIKELY FROM SLICER) ==============
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER: tool(s) unknown. Finding largest value")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER: Swapped T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section %}

      {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + purge_length_addition %}

    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
    {% endif %}

    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("BLOBIFIER: Purging %.2fmm of filament" % (purge_len|float))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}

      # ====================================================================================
      # ==================== POSITIONING ===================================================
      # ====================================================================================
      
      # Move to the assembly, first a bit more to the right (brush_start) to avoid a 
      # potential filametrix pin if it's not already on the same Y coordinate.
      {% if printer.toolhead.position.y != position_y %}
        G1 X{brush_start} Y{position_y} F{travel_spd_xy}
      {% endif %}
      # Move over to the tray
      G1 X{purge_x} F{travel_spd_xy}

      # ====================================================================================
      # ==================== BUCKET SHAKE ==================================================
      # ====================================================================================
      
      {% if enable_shaker and (safe.shake or ignore_safe) %}
        {% if (bl_count.current_blobs + 1) >= bl_count.next_shake %}
          BLOBIFIER_SHAKE_BUCKET SHAKES={bucket_shakes}
          _BLOBIFIER_CALCULATE_NEXT_SHAKE
        {% endif %}
      {% endif %}
      
      # ====================================================================================
      # ==================== POSITIONING ON TRAY ===========================================
      # ====================================================================================
      {% if safe.tray or ignore_safe %}
        G1 Z{tray_top + purge_start} F{travel_spd_z}

        # Extend the blobifier
        BLOBIFIER_SERVO POS=out
        # Check if the servo is in correct position
        {% if printer.mmu is defined and printer.mmu.enabled %}
          {% if printer.configfile.config.mmu.sync_to_extruder == "1" %}
            MMU_SYNC_GEAR_MOTOR SYNC=1
          {% else %}
            MMU_SERVO POS=up
          {% endif %}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}

      # Repeat the process until purge_len is reached
      {% for n in range(iterations) %}
      
        # Calculate current iteration in current blob
        {% set step = n % max_iterations_per_blob %}

        {% if step == 0 and (safe.tray or ignore_safe) %}
          G1 Z{tray_top + purge_start} F{travel_spd_z}
        {% endif %}

        # Determine the amount to extrude. Either the remaining purge_len or 
        # max_iteration_length.
        {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
        {% set extrude_amount = [purge_amount_left,max_iteration_length]|min %}
        {% set extrude_ratio = extrude_amount / max_iteration_length %}

        # relative positioning
        G91 
        M83

        # Calculate the amount z has to be raised
        # If step equals 0, the start position of the nozzle is already a little higher.
        {% set step_triangular = step * (step + 1) / 2 %}
        {% set z_raise_substract = purge_start if step == 0 else 
          step_triangular * iteration_z_change %}
        {% set raise_z = (iteration_z_raise - z_raise_substract) * extrude_ratio %}

        # make sure raise_z never goes negative, dropping the nozzle while purging.
        {% set raise_z = [raise_z,0]|max %}

        # Calculate the raise speed based on the purge speed.
        {% set duration = extrude_amount / purge_spd %} 
        {% set speed = raise_z / duration %}
      
        # Purge one iteration
        {% if safe.tray or ignore_safe %}
          G1 Z{raise_z} E{extrude_amount} F{speed}
        {% endif %}

        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================
        {% if safe.tray or ignore_safe %}
          {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
          {% set purge_length_reached = purge_len - max_iteration_length * (n+1) <= 0 %}
          {% if max_iterations_reached or purge_length_reached %}
            # Raise z a bit to relieve pressure on the blob preventing it to go sideways
            G1 Z{eject_hop} F{travel_spd_z}
            # Retract the tray
            BLOBIFIER_SERVO POS=in
            # Move the toolhead down to purge_start height lowering the blob below the tray
            G90 # absolute positioning
            G1 Z{tray_top} F{travel_spd_z}
            # Extend the tray to 'cut off' the blob and prepare for the next blob
            BLOBIFIER_SERVO POS=out
            BLOBIFIER_SERVO POS=in
            BLOBIFIER_SERVO POS=out
            # Keep track of the # of blobs
            _BLOBIFIER_COUNT
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {% if safe.tray or ignore_safe %}
      G1 Z{tray_top + 1} F{travel_spd_z}
      G4 P{pressure_release_time}
    {% endif %}
    {% if safe.brush or ignore_safe %}
      BLOBIFIER_CLEAN
    {% else %}
      G1 X{brush_start} F{travel_spd_xy}
    {% endif %}

    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================

    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}

    # Final retract to match what Happy Hare is expecting
    G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 


##########################################################################################
# Wipes the nozzle on the brass brush
#
[gcode_macro BLOBIFIER_CLEAN]
gcode:
  {% set bb = printer['gcode_macro BLOBIFIER'] %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  # Position for wipe. Either left or right of brush based off bucket_pos to avoid 
  # unnecessary travel.
  
  SAVE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state

  G90

  G1 Z{bb.brush_top + bb.clearance_z} F{bb.travel_spd_z}
  G1 X{bb.brush_start} F{bb.travel_spd_xy}
  G1 Y{position_y}

  # Move nozzle down into brush.
  G1 Z{bb.brush_top} F{bb.travel_spd_z}
   
  # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
  {% for wipes in range(1, (bb.wipe_qty + 1)) %}
     G1 X{bb.brush_start + bb.brush_width} F{bb.wipe_spd_xy}
     G1 X{bb.brush_start} F{bb.wipe_spd_xy}
  {% endfor %}

  RESTORE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state



##########################################################################################
# Park the nozzle on the tray to prevent oozing during filament swaps. Place this 
# extension in the post_form_tip extension in mmu_macro_vars.cfg:
#   variable_user_post_form_tip_extension: "BLOBIFIER_PARK"
#
[gcode_macro BLOBIFIER_PARK]
variable_restore_z: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set safe = printer['gcode_macro _BLOBIFIER_SAFE_DESCEND'] %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y - bl.skew_correction %}

  SET_GCODE_VARIABLE MACRO=BLOBIFIER_PARK VARIABLE=restore_z VALUE={pos.z}

  SAVE_GCODE_STATE NAME=blobifier_park_state
  
  {% if "xyz" in printer.toolhead.homed_axes and printer.quad_gantry_level and printer.quad_gantry_level.applied %}
    G90

    G1 X{bl.brush_start} Y{position_y} F{bl.travel_spd_xy}
    G1 X{bl.purge_x}
    {% if safe.tray or ignore_safe %}
      G1 Z{bl.tray_top} F{bl.travel_spd_z}
    {% endif %}
  {% else %}
    RESPOND MSG="Please home (and QGL) before parking"
