########################################################################################################################
# Happy Hare supporting macro configuration
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Supporting set of macros supplied with Happy Hare can be customized by editing the macro "variables" declared here.
#
# This configuration will automatically retained and upgraded between releases (a backup of previous config files will
# always be made for your reference). If you want to customize macros beyond what is possible through these variables
# it is highly recommended you copy the macro to a new name and change the callback macro name in 'mmu_parameters.cfg'
# That way the default macros can still be upgraded but your customization will be left intact
#


# PERSISTED STATE ---------------------------------------------------------
# Happy Hare stored configuration and state in the klipper variables file.
# Since there can only be a single 'save_variables' file, if you already
# have one you will need to merge the two and point this appropriately
#
[save_variables]
filename: /home/pi/printer_data/config/mmu/mmu_vars.cfg


# PRINT START/END ---------------------------------------------------------
# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗████████╗ █████╗ ██████╗ ████████╗
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       ███████╗   ██║   ███████║██████╔╝   ██║   
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ╚════██║   ██║   ██╔══██║██╔══██╗   ██║   
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████║   ██║   ██║  ██║██║  ██║   ██║   
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
#   (base/mmu_software.cfg)
#
[gcode_macro _MMU_SOFTWARE_VARS]
description: Happy Hare optional configuration for print start/end checks
gcode: # Leave empty

# These variables control the behavor of the optional MMU_START_SETUP and MMU_START_LOAD_INITIAL_TOOL macros
variable_user_pre_initialize_extension      : "G28"	; Executed at start of MMU_START_SETUP. Commonly G28 to home
variable_home_mmu                           : False	; True/False, Whether to home mmu before print starts
variable_check_gates                        : True	; True/False, Whether to check filament is loaded in all gates used
variable_load_initial_tool                  : True	; True/False, Whether to automatically load initial tool
#
# Automapping strategy to apply slicer tool map to find matching MMU gate (will adjust tool-to-gate map). Options are:
#   'none'           - don't automap (i.e. don't update tool-to-gate map)
#   'filament_name'  - exactly match on case insensitive filament name
#   'material'       - exactly match on material
#   'color'          - exactly match on color (with same material)
#   'closest_color'  - match to closest available filament color (with same material)
#   'spool_id'       - exactly match on spool_id  [FUTURE]
variable_automap_strategy                   : "none"	; none|filament_name|material|color|closest_color|spool_id

# These variables control the behavor of the optional MMU_END macro
variable_eject_tool                         : True	; True/False, Whether to eject the tool at the end of the print
variable_reset_ttg                          : False	; True/False, Whether reset TTG map at end of print
variable_dump_stats                         : True	; True/False, Whether to display print stats at end of print


# STATE MACHINE CHANGES ---------------------------------------------------
# ███████╗████████╗ █████╗ ████████╗███████╗     ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗
# ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝    ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝
# ███████╗   ██║   ███████║   ██║   █████╗      ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  
# ╚════██║   ██║   ██╔══██║   ██║   ██╔══╝      ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  
# ███████║   ██║   ██║  ██║   ██║   ███████╗    ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗
# ╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝     ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝
#   (base/mmu_state.cfg)
#
[gcode_macro _MMU_STATE_VARS]
description: Happy Hare configuration for state change hooks
gcode: # Leave empty

# You can extend functionality to all Happy Hare state change or event
# macros by adding a command (or call to your gcode macro).
# E.g for additional LED logic or consumption counters
variable_user_action_changed_extension      : ''	; Executed after default logic with duplicate params
variable_user_print_state_changed_extension : ''	; Executed after default logic with duplicate params
variable_user_mmu_event_extension           : ''	; Executed after default logic with duplicate params

# Maintenance warning limits (consumption counters)
variable_servo_down_limit                   : 5000      ; Set to -1 for no limit / disable warning
variable_cutter_blade_limit                 : 3000      ; Set to -1 for no limit / disable warning


# LED CONTROL -------------------------------------------------------------
# ██╗     ███████╗██████╗ ███████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██║  ██║███████╗
# ██║     ██╔══╝  ██║  ██║╚════██║
# ███████╗███████╗██████╔╝███████║
# ╚══════╝╚══════╝╚═════╝ ╚══════╝
# Only configure if you have LEDs installed. The led_effects option is
# automatically ignored if led-effects klipper module is not installed
#   (base/mmu_led.cfg)
#
[gcode_macro _MMU_LED_VARS]
description: Happy Hare led macro configuration variables
gcode: # Leave empty

# Default effects for LED segments when not providing action status
# This can be any effect name, 'r,g,b' color, or built-in functional effects:
#   'off'             - LED's off
#   'on'              - LED's white
#   'gate_status'     - indicate gate availability
#   'filament_color'  - indicate filament color
#   'slicer_color'    - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
variable_led_enable             : True			; Whether LEDs are enabled at startup (MMU_LED can control)
variable_led_animation          : True			; Whether to use led-animation-effects vs static LEDs
variable_default_exit_effect    : "gate_status"		;    off|gate_status|filament_color|slicer_color
variable_default_entry_effect   : "filament_color"	;    off|gate_status|filament_color|slicer_color
variable_default_status_effect  : "filament_color"	; on|off|gate_status|filament_color|slicer_color
variable_white_light            : (1, 1, 1)		; RGB color for static white light
variable_black_light            : (.01, 0, .02)		; RGB color used to represent "black" (filament)
variable_empty_light            : (0, 0, 0)		; RGB color used to represent empty gate


# SEQUENCE MACRO - PARKING MOVEMENT CONTROL -------------------------------
# ███╗   ███╗ ██████╗ ██╗   ██╗███████╗███╗   ███╗███████╗███╗   ██╗████████╗
# ████╗ ████║██╔═══██╗██║   ██║██╔════╝████╗ ████║██╔════╝████╗  ██║╚══██╔══╝
# ██╔████╔██║██║   ██║██║   ██║█████╗  ██╔████╔██║█████╗  ██╔██╗ ██║   ██║   
# ██║╚██╔╝██║██║   ██║╚██╗ ██╔╝██╔══╝  ██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   
# ██║ ╚═╝ ██║╚██████╔╝ ╚████╔╝ ███████╗██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   
# ╚═╝     ╚═╝ ╚═════╝   ╚═══╝  ╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   
# Configure carefully if you 'enable_park: True'
#   (base/mmu_sequence.cfg)
#
[gcode_macro _MMU_SEQUENCE_VARS]
description: Happy Hare sequence macro configuration variables
gcode: # Leave empty

# These contol the movement of the toolhead during toolchange.
# If 'enable_park: False' all movement is disabled in print except when
# handling runout where 'enable_runout_park' controls parking. Allows for
# parking just for runout handling or exclude runout. Parking when out of
# a print is controlled by 'enable_standalone_park'. If parking is enabled
# the 'restore_xy_pos' allows the restoration of toolhead x,y position to
# be deferred to the slicer. This results in less dwell time on the print
# (caution: the z-height will always be restored)
#
# The default parking logic is a straight line move to the 'park_xy' position.
# To implement fancy movement and control you can specify a
# 'variable_user_park_move_macro` to use instead of this straight line move.
#
variable_enable_park            : True		; True = Enable parking move when printing (not runout), False = disable
variable_enable_park_runout     : True		; True = Enable parking move during runout handling, False = disable
variable_enable_park_standalone : True		; True = Enable parking move when not printing, False = disable
variable_restore_xy_pos         : "last"	; last|next|none - What x,y position the toolhead should travel to after a toolchange
variable_park_xy                : 50, 50	; Coordinates of park position for toolchange if using default park logic
variable_park_z_hop             : 1.0		; Additional Z_hop (mm) when parking (works in and out of print)
variable_min_toolchange_z       : 2.0		; The absolute minimum height for toolchange moves during print
variable_travel_speed           : 150		; XY travel speed in mm/s
variable_lift_speed             : 15		; Z travel speed in mm/s
variable_auto_home              : True		; True = Automatically home if necessary, False = disable
variable_park_after_form_tip    : False		; True = if tip cutting to delay move to park position, False = park immediately
