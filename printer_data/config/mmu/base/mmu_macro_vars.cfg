########################################################################################################################
# Happy Hare MMU Software
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Copyright (C) 2022  moggieuk#6538 (discord) moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Happy Hare supporting MACRO configuration
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
#
# Supporting set of macros supplied with Happy Hare can be customized by editing the macro "variables" declared here.
#
# This configuration will automatically retained and upgraded between releases (a backup of previous config files will
# always be made for your reference). If you want to customize macros beyond what is possible through these variables
# it is highly recommended you copy the macro to a new name and change the callback macro name in 'mmu_parameters.cfg'
# That way the default macros can still be upgraded but your customization will be left intact
#


# PERSISTED STATE ---------------------------------------------------------
# Happy Hare stores configuration and state in the klipper variables file.
# Since klipper can only be a single 'save_variables' file, if you already
# have one you will need to merge the two and point this appropriately.
#
[save_variables]
filename: /home/pi/printer_data/config/mmu/mmu_vars.cfg


# NECESSARY KLIPPER OVERRIDES ---------------------------------------------
# ██╗  ██╗██╗     ██╗██████╗ ██████╗ ███████╗██████╗ 
# ██║ ██╔╝██║     ██║██╔══██╗██╔══██╗██╔════╝██╔══██╗
# █████╔╝ ██║     ██║██████╔╝██████╔╝█████╗  ██████╔╝
# ██╔═██╗ ██║     ██║██╔═══╝ ██╔═══╝ ██╔══╝  ██╔══██╗
# ██║  ██╗███████╗██║██║     ██║     ███████╗██║  ██║
# ╚═╝  ╚═╝╚══════╝╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝
#
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50

# For dialog prompts and progress in Mainsail. Requires Mainsail version >= v2.9.0
[respond]

# Other Happy Hare prerequisites. Harmless if already defined elsewhere in user config
[display_status]
[pause_resume]
[virtual_sdcard]
path: ~/printer_data/gcodes
#on_error_gcode: CANCEL_PRINT


# PRINT START/END ---------------------------------------------------------
# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗████████╗ █████╗ ██████╗ ████████╗
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       ███████╗   ██║   ███████║██████╔╝   ██║   
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ╚════██║   ██║   ██╔══██║██╔══██╗   ██║   
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████║   ██║   ██║  ██║██║  ██║   ██║   
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
#   (base/mmu_software.cfg)
#
[gcode_macro _MMU_SOFTWARE_VARS]
description: Happy Hare optional configuration for print start/end checks
gcode: # Leave empty

# These variables control the behavor of the MMU_START_SETUP and MMU_START_LOAD_INITIAL_TOOL macros
variable_user_pre_initialize_extension      : "G28"	; Executed at start of MMU_START_SETUP. Commonly G28 to home
variable_home_mmu                           : False	; True/False, Whether to home mmu before print starts
variable_check_gates                        : True	; True/False, Whether to check filament is loaded in all gates used
variable_load_initial_tool                  : True	; True/False, Whether to automatically load initial tool
#
# Automapping strategy to apply slicer tool map to find matching MMU gate (will adjust tool-to-gate map). Options are:
#   'none'           - don't automap (i.e. don't update tool-to-gate map)
#   'filament_name'  - exactly match on case insensitive filament name
#   'material'       - exactly match on material
#   'color'          - exactly match on color (with same material)
#   'closest_color'  - match to closest available filament color (with same material)
#   'spool_id'       - exactly match on spool_id  [FUTURE]
variable_automap_strategy                   : "none"	; none|filament_name|material|color|closest_color|spool_id

# These variables control the behavior of the MMU_END macro
variable_user_print_end_extension           : ''	; Executed at start of MMU_END. Good place to move off print
variable_eject_tool                         : True	; True/False, Whether to eject the tool at the end of the print
variable_reset_ttg                          : False	; True/False, Whether reset TTG map at end of print
variable_dump_stats                         : True	; True/False, Whether to display print stats at end of print


# STATE MACHINE CHANGES ---------------------------------------------------
# ███████╗████████╗ █████╗ ████████╗███████╗     ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗
# ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝    ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝
# ███████╗   ██║   ███████║   ██║   █████╗      ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  
# ╚════██║   ██║   ██╔══██║   ██║   ██╔══╝      ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  
# ███████║   ██║   ██║  ██║   ██║   ███████╗    ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗
# ╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝     ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝
#   (base/mmu_state.cfg)
#
[gcode_macro _MMU_STATE_VARS]
description: Happy Hare configuration for state change hooks
gcode: # Leave empty

# You can extend functionality to all Happy Hare state change or event
# macros by adding a command (or call to your gcode macro).
# E.g for additional LED logic or consumption counters
variable_user_action_changed_extension      : ''	; Executed after default logic with duplicate params
variable_user_print_state_changed_extension : ''	; Executed after default logic with duplicate params
variable_user_mmu_event_extension           : ''	; Executed after default logic with duplicate params

# Maintenance warning limits (consumption counters)
variable_servo_down_limit                   : 5000      ; Set to -1 for no limit / disable warning
variable_cutter_blade_limit                 : 3000      ; Set to -1 for no limit / disable warning


# LED CONTROL -------------------------------------------------------------
# ██╗     ███████╗██████╗ ███████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██║  ██║███████╗
# ██║     ██╔══╝  ██║  ██║╚════██║
# ███████╗███████╗██████╔╝███████║
# ╚══════╝╚══════╝╚═════╝ ╚══════╝
# Only configure if you have LEDs installed. The led_effects option is
# automatically ignored if led-effects klipper module is not installed
#   (base/mmu_led.cfg)
#
[gcode_macro _MMU_LED_VARS]
description: Happy Hare led macro configuration variables
gcode: # Leave empty

# Default effects for LED segments when not providing action status
# This can be any effect name, 'r,g,b' color, or built-in functional effects:
#   'off'             - LED's off
#   'on'              - LED's white
#   'gate_status'     - indicate gate availability
#   'filament_color'  - indicate filament color
#   'slicer_color'    - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
variable_led_enable             : True			; True = LEDs are enabled at startup (MMU_LED can control), False = Disabled
variable_led_animation          : True			; True = Use led-animation-effects, False = Static LEDs
variable_default_exit_effect    : "gate_status"		;    off|gate_status|filament_color|slicer_color
variable_default_entry_effect   : "filament_color"	;    off|gate_status|filament_color|slicer_color
variable_default_status_effect  : "filament_color"	; on|off|gate_status|filament_color|slicer_color
variable_white_light            : (1, 1, 1)		; RGB color for static white light
variable_black_light            : (.01, 0, .02)		; RGB color used to represent "black" (filament)
variable_empty_light            : (0, 0, 0)		; RGB color used to represent empty gate


# SEQUENCE MACRO - PARKING MOVEMENT AND TOOLCHANGE CONTROL ----------------
# ███╗   ███╗ ██████╗ ██╗   ██╗███████╗███╗   ███╗███████╗███╗   ██╗████████╗
# ████╗ ████║██╔═══██╗██║   ██║██╔════╝████╗ ████║██╔════╝████╗  ██║╚══██╔══╝
# ██╔████╔██║██║   ██║██║   ██║█████╗  ██╔████╔██║█████╗  ██╔██╗ ██║   ██║   
# ██║╚██╔╝██║██║   ██║╚██╗ ██╔╝██╔══╝  ██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   
# ██║ ╚═╝ ██║╚██████╔╝ ╚████╔╝ ███████╗██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   
# ╚═╝     ╚═╝ ╚═════╝   ╚═══╝  ╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   
# Configure carefully if you 'enable_park: True'
#   (base/mmu_sequence.cfg)
#
[gcode_macro _MMU_SEQUENCE_VARS]
description: Happy Hare sequence macro configuration variables
gcode: # Leave empty

# Parking and movement controls:
# Happy Hare defines 7 operations that may require parking. You can specifiy
# whether to park for each of those operations both during a print and
# standalone (not printing) with Happy Hare or when HH is disabled:
#
#  enable_park_printing
#    This is a list of the operations that should result in toolhead parking
#    while in a print. There are really two main starting points from which
#    you can customize. If using the slicer to form tips (and toolchange is
#    over the wipetower) you don't want to park on "toolchange" but you would
#    want to on "runout" which is a forced toolchange unknown by the slicer.
#    Typically you would also want to park at least on pause, cancel and
#    complete if not done elsewhere
#
#  enabled_park_standalone
#    List of the operations that should result in toolhead parking when not
#    printing, for example, just manipulating the MMU manually or via
#    Klipperscreen. Really it is up to you to choose based on personal
#    workflow preferences but this defaults to just 'pause,cancel'
#    (i.e. disabled for toolchange)
#
#  enabled_park_disabled
#    List of the operations that should result in toolhead parking when MMU is
#    disabled (MMU ENABLE=0) and using Happy Hare client macros. Note that only
#    pause and cancel can occur in this mode and would typically be enabled
#
# The operations are as follows:
#   toolchange - normal toolchange initiated with Tx or MMU_CHANGE_TOOL command
#   runout     - when a forced toolchange occurs as a result of runout
#   load       - individual MMU_LOAD operation
#   unload     - individual MMU_UNLOAD/MMU_EJECT operation
#   complete   - when print is complete (Happy Hare enabled)
#   pause      - a regular klipper PAUSE
#   cancel     - a regular klipper CANCEL_PRINT
#
# It is possible to call the parking macro manually in this form should you wish
# to include in your macros.
#
#    _MMU_PARK FORCE_PARK=1 X=10 Y=10 Z_HOP=5
#
# restore_xy_pos
#    Controls where the toolhead (x,y) is returned to after an operation that
#    invokes a parking move:
#   last - return to original position before park (frequently the default)
#   next - return to next print position if possible else last logic will be applied.
#          In print this reduces dwell time at the last position reducing blobbing
#          and unecessary movement. Only applied to "toolchange" operation
#   none - the toolhead is left wherever it ends up after change. In a print the
#          next gcode command will restore toolhead x,y position
#
# Notes:
# - The starting z-height will always be restored, thus the different between 'next'
#   and 'none' is the z-height at which the (x,y) move occurs and the location of
#   of any un-retract
# - The default parking logic is a straight line move to the 'park_*' position.
#   To implement fancy movement and control you can specify your own
#   'user_park_move_macro' to use instead of default straight line move
#
# Retraction can be used to optimize stringing and blobs that can occur when
# changing tools and are active only during a print.
# IMPORTANT: For toolchanging the config order would be:
#   1. In mmu_parameters.cfg configure extruder dimensions like
#      'toolhead_extruder_to_nozzle',etc. These are based on geometry.
#   2. In mmu_parameters.cfg tweak 'toolhead_ooze_reduction' only if necessary
#      so that filament _just_ appears at the nozzle on load
#   3. Only then, adjust retraction to control stringing and blobs when
#      changing tool in a print
variable_enable_park_printing   : 'toolchange,load,unload,pause,cancel'	; Empty '' to disable parking
variable_enable_park_standalone : 'toolchange,load,unload,pause,cancel'			; Empty '' to disable parking
